import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.project.ProjectManager// нахуй
import com.atlassian.jira.project.Project// нахуй
import java.text.SimpleDateFormat// нахуй
import org.apache.log4j.Level
import org.apache.log4j.Logger
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.IssueManager
import groovy.json.JsonSlurper// нахуй
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.worklog.WorklogManager// нахуй
import com.atlassian.jira.issue.worklog.Worklog
import org.apache.http.client.methods.HttpGet
import org.apache.http.entity.ContentType// нахуй
import org.apache.http.entity.StringEntity// нахуй
import org.apache.http.entity.mime.MultipartEntityBuilder// нахуй
import org.apache.http.entity.mime.content.FileBody// нахуй
import org.apache.http.impl.client.HttpClientBuilder// нахуй
import com.atlassian.mail.queue.SingleMailQueueItem
import org.apache.http.impl.client.CloseableHttpClient// нахуй
import org.apache.http.client.methods.HttpGet// нахуй
import org.apache.http.client.methods.CloseableHttpResponse// нахуй
import org.apache.http.client.methods.HttpPost// нахуй
import org.apache.http.HttpEntity// нахуй
import com.fasterxml.jackson.databind.node.ObjectNode
import com.fasterxml.jackson.databind.node.JsonNodeFactory
import com.sun.mail.imap.IMAPProvider// нахуй
import com.atlassian.mail.server.MailServerManager// нахуй
import com.atlassian.mail.server.SMTPMailServer// нахуй
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.mail.Email
import com.atlassian.mail.queue.SingleMailQueueItem
import java.util.Calendar


new TimeTracking().run()
class TimeTracking {//не конфликтует название как файл называется?
	
    ProjectManager projectManager = ComponentAccessor.getProjectManager()// нахуй
    JqlQueryParser jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser) 
    SearchService searchService = ComponentAccessor.getComponent(SearchService)
    IssueManager issueManager = ComponentAccessor.getIssueManager()  
    ApplicationUser admin = ComponentAccessor.getUserManager().getUserByName("v.bykovski") 
    SimpleDateFormat worklogDateFormat = new SimpleDateFormat("dd.MMM.yyyy") // нахуй
    SimpleDateFormat checkDateFormat = new SimpleDateFormat("MMM.yyyy") // нахуй
    
    Logger logger = Logger.getLogger(this.class.name)
    List<Object> map = new ArrayList()
    String[] teamLogins = ["APolyakov_omru","ABalash_omru","ACHubrik_omru","AMuravitskiy_ou","NZaytsev_ou"]

    
    def run() { //void
        logger.setLevel(Level.DEBUG)
        Date referenceDate = new Date()
	Calendar c = Calendar.getInstance()
	c.setTime(referenceDate)
	c.add(Calendar.MONTH, -1)
        for (String login : teamLogins) {
            	String userKey = ComponentAccessor.getUserManager().getUserByName(login)?.getKey()// манагера мог бы и вынести как остальных
        	String jql = """worklogAuthor = ${login} AND  worklogDate >= startOfMonth(-1) AND worklogDate <= endOfMonth(-1) AND project in (ATLAS,AUTO)""" 
        	logger.debug("jql is - ${jql}") 
		def query = jqlQueryParser.parseQuery(jql) 
        	def results = searchService.search(admin, query, PagerFilter.getUnlimitedFilter())
        	def issues = results.results.collect {issueManager.getIssueObject(it.id)}// мб лист ищью?
        	logger.debug("Total issues: ${results.total}") 
		for (Issue issue : issues) { 
            		logger.debug("issue for worklog ${issue.key}") 
                	Collection<Worklog> worklogs = ComponentAccessor.worklogManager.getByIssue(issue) // манагера мог бы и вынести как остальных
				
                	for(Worklog worklog : worklogs){
                    		if (worklog.getAuthorKey() == userKey && worklog.getStartDate().getMonth() == c.getTime().getMonth()) {
					ObjectNode tagObject = JsonNodeFactory.instance.objectNode()
                        		tagObject.put("author", worklog.authorKey)
                        		tagObject.put("comment", worklog.comment.replaceAll("\"","")) // лучше юзани checkCommentForJSON(comment)
                        		tagObject.put("startDate", worklog.startDate.dateTimeString.toString())
                        		tagObject.put("timeSpent",worklog.timeSpent.toString()) 
                        		tagObject.put("issueKey",worklog.issue.getKey())
                        		map.add(tagObject)
                    		}
                	}
            	}
        }
        //return map
        logger.debug map
        sendMail("no-reply@omneemo.com,a.polyakov@omneemo.com","Ворклоги",map.toString())// добавь еще кого то и объясни что да как запустить, а то вдруг отпуск
        return// нахуй
    }

/*  List <String> getProjectKeys(List<String> projectIDs) {
        List<String> projectKeys = new ArrayList<String>()
        for (String projectId : projectIDs) {
            Long id = Long.parseLong(projectId)
            if (id) {
                Project currentProject = projectManager.getProjectObj(id)
                if (currentProject) projectKeys.add(currentProject.key)
            }    
        }
        return projectKeys
    }нахуй*/
    
    static boolean sendMail(String emailAddr, String subject, String body) { // метод для отправки емейла 
    return
    //   def mailServer = ComponentAccessor.mailServerManager.defaultSMTPMailServer // Вызываем майл сервер
     //   boolean wasAddedToQueue = false // если сделано через Queue то маилсервер тебе не нужен
     //   if (mailServer) {
            Email mail = new Email(emailAddr)
            mail.setSubject(subject)
            mail.setBody(body)
            mail.setMimeType("text/html")
        SingleMailQueueItem  /*  def */ item= new SingleMailQueueItem(mail)
            ComponentAccessor.mailQueue.addItem(item)
    //        wasAddedToQueue = true
    //}
    // return wasAddedToQueue
    }

    // удаляет все возможные символы, которые могут уронить JSON
    String checkCommentForJSON(String comment){
        if(comment){
            byte[] rez = comment.getBytes().collect{
                if(it == 9)	32
                else if (it == 92) 45
                else it
            }
            String checkedComment = new String(rez)
            checkedComment = checkedComment.replaceAll('"',"'")
            String[] lines = checkedComment.split("\n")
            comment =" "
            if (lines.size()>1){
                for (String part : lines){
                    if(part.getBytes()==[13]) continue
                    log.debug part
                    part.replace("\\n","").replaceAll("	"," ")
                    if(part.size()>0)
                    comment += part.substring(0,part.size()-1) +"\\n"
                }
            }
            else comment = checkedComment
        }
    }
}

