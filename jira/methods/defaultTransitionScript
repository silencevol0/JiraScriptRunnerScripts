import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.workflow.TransitionOptions.Builder
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.workflow.JiraWorkflow


boolean transitIssue(MutableIssue issue, String transitName) {
    boolean checker = false
    IssueService issueService = ComponentAccessor.getIssueService()
    JiraWorkflow workflow = ComponentAccessor.workflowManager.getWorkflow(issue)
    Builder builder =  new Builder()
    Builder transopt = builder.skipConditions().skipValidators().skipPermissions()
    List<Integer> transitionsId = workflow.getActionsByName(transitName)*.id as List
    for (Integer transitionID : transitionsId) {
        IssueService.TransitionValidationResult transitionValidationResult = issueService.validateTransition(admin, issue.getId(), transitionID, issueService.newIssueInputParameters(),transopt.build())
        logger.debug("${issue.key} ${transitionValidationResult.isValid()}")
        if (transitionValidationResult.isValid()) {
            IssueService.IssueResult transitionResult = issueService.transition(admin, transitionValidationResult)
            checker = true
            break
        }  
    }
    return checker
}




IssueService.IssueResult transitIssue(Issue issue, int transitionID){
    IssueService issueService = ComponentAccessor.getIssueService()
    Builder builder =  new Builder()
    Builder transopt = builder.skipConditions().skipValidators().skipPermissions()
    IssueService.TransitionValidationResult transitionValidationResult = issueService.validateTransition(admin, issue.getId(), transitionID, issueService.newIssueInputParameters(),transopt.build())

    if (transitionValidationResult.isValid())

        IssueService.IssueResult transitionResult = issueService.transition(admin, transitionValidationResult)
}