import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.issue.IssueInputParameters
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.workflow.TransitionOptions.Builder
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueInputParametersImpl
import com.atlassian.jira.issue.resolution.Resolution
import org.apache.log4j.Logger
import org.apache.log4j.Level
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.workflow.TransitionOptions
import com.atlassian.jira.util.thread.JiraThreadLocalUtil

//def issue = ComponentAccessor.issueManager.getIssueObject("ISSUE KEY")


JiraThreadLocalUtil  jtlu
Thread.start{
    try {
        jtlu = ComponentAccessor.getComponent(JiraThreadLocalUtil)
        jtlu.preCall()
        sleep(1000)
        run(issue)
    }
    catch(Exception e){
        log.error(e)
    }
    finally{
        jtlu.postCall(log)
    }
}

def run(MutableIssue issue) {
    log.setLevel(Level.DEBUG)
	MutableIssue parent = issue.getParentObject() as MutableIssue
	Resolution resolution = ComponentAccessor.getConstantsManager().getResolutions().findAll{it.name == "RESOLUTION NAME"}.first()
	ApplicationUser admin = ComponentAccessor.getUserManager().getUserByName("USERNAME")
	Collection<Issue> sbTasks = parent.getSubTaskObjects()
	Collection<Issue> statusSbTasks = sbTasks.findAll { it.getStatus().getName().equals("Закрыто") }
	log.debug "sbTaskSize >>> ${sbTasks.size()} and ClosedSbTasks >>> ${statusSbTasks.size()}"
	if (sbTasks.size() == statusSbTasks.size()) {
    	for (Issue sbTask : sbTasks) {
        	if (sbTask.resolution) {
        		if (sbTask.resolution.name == "ANY RESOLUTION NAME") resolution = sbTask.resolution
        	}
		}
    	log.debug "Resolution Field >>> ${resolution.name}"
    	parent.setResolution(resolution)
    	transitIssue(parent,"TRANSIT NAME")
    
    	for (Issue sbTask : sbTasks) {
		transitIssue(sbTask,"TRANSIT NAME")
		}
	}
}





def transitIssue(Issue issue, String transitName){
    ApplicationUser sysUser = ComponentAccessor.userManager.getUserByName("USERNAME")
    def workflow = ComponentAccessor.workflowManager.getWorkflow(issue)
    int transitionID = workflow.getActionsByName(transitName).first().id              
    IssueService issueService = ComponentAccessor.getIssueService()
    def builder =  new TransitionOptions.Builder().skipConditions().skipValidators().skipPermissions()
    IssueService.TransitionValidationResult transitionValidationResult = issueService.validateTransition(sysUser, issue.getId(), transitionID, issueService.newIssueInputParameters(),builder.build())
    if (transitionValidationResult.isValid()){
    	IssueService.IssueResult transitionResult = issueService.transition(sysUser, transitionValidationResult)
        ComponentAccessor.issueManager.updateIssue(sysUser, issue as MutableIssue, EventDispatchOption.ISSUE_UPDATED, true)
        ComponentAccessor.getComponent(IssueIndexingService).reIndex(issue)
    }
}