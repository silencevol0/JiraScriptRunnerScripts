import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.project.ProjectManager
import com.atlassian.jira.project.Project
import java.text.SimpleDateFormat
import java.util.Calendar
import org.apache.log4j.Level
import org.apache.log4j.Logger
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.web.bean.PagerFilter
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.IssueManager
import groovy.json.JsonSlurper
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.worklog.WorklogManager
import com.atlassian.jira.issue.worklog.Worklog
import org.apache.http.client.methods.HttpGet
import org.apache.http.entity.ContentType
import org.apache.http.entity.StringEntity
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.impl.client.HttpClientBuilder
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.servicedesk.api.requesttype.RequestTypeService
import com.atlassian.servicedesk.api.request.type.CustomerRequestTypeService
import com.onresolve.scriptrunner.runner.customisers.WithPlugin
import com.onresolve.scriptrunner.runner.customisers.PluginModule
import com.atlassian.servicedesk.api.util.paging.PagedRequest
import com.atlassian.servicedesk.api.util.paging.SimplePagedRequest
import com.atlassian.servicedesk.api.user.UserFactory
import com.atlassian.jira.issue.search.SearchQuery
import com.atlassian.mail.Email;
import com.sun.mail.imap.IMAPProvider
import com.atlassian.mail.server.MailServerManager
import com.atlassian.mail.server.SMTPMailServer
import com.atlassian.mail.queue.SingleMailQueueItem



new TimeTracking().run()
class TimeTracking {

    @WithPlugin("com.atlassian.servicedesk")
    @PluginModule
    RequestTypeService requestTypeService
    
    ProjectManager projectManager = ComponentAccessor.getProjectManager()
    JqlQueryParser jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser) // Все что в этом абзаце для 
    SearchService searchService = ComponentAccessor.getComponent(SearchService) // Поиска по JQL
    IssueManager issueManager = ComponentAccessor.getIssueManager()  // +
    ApplicationUser admin = ComponentAccessor.getUserManager().getUserByKey("USERNAME") // +
    Project projectKey = projectManager.getProjectObjByKey("PROJECTKEY")
	CustomField someCF = ComponentAccessor.customFieldManager.getCustomFieldObjectsByName("FIELDNAME").first()
    String issueType = ComponentAccessor.constantsManager.getAllIssueTypeObjects().find{it.getName() == "Task"}.id
    SimpleDateFormat worklogDateFormat = new SimpleDateFormat("dd.MMM.yyyy") // формат для Summary
    SimpleDateFormat checkDateFormat = new SimpleDateFormat("MMM.yyyy") // формат для поиска совпадений по прошлому месяцу
    def CustomerRequestTypeValue = getCustomerRequestType()
    CustomField cfReqType = ComponentAccessor.customFieldManager.getCustomFieldObjectsByName("Customer Request Type").first()
    CustomField jqlCF = ComponentAccessor.customFieldManager.getCustomFieldObjectsByName("JQL").first()
    String jqlValue
    List<String> ignoredTeams = ["NAMESTEAMS"]

    String BASE_URL = "BASEURL/rest/tempo-teams/2/team" // URL рест запроса для всех тим
    Logger logger = Logger.getLogger(this.class.name)
    
    def run() { 
        try {
        logger.setLevel(Level.DEBUG)
        String jql = """JQL""" // jql для поиска ворклогов
        jqlValue = jql
        ApplicationUser reporter = ComponentAccessor.userManager.getUserByName("REPORTER")
        ApplicationUser teamLead = ComponentAccessor.userManager.getUserByName("ASSIGNEE")
        def query = jqlQueryParser.parseQuery(jql) // Хитрые манипуляция для поиска в Jira по jql выше
        def results = searchService.search(admin, query, PagerFilter.getUnlimitedFilter())
        def issues = results.results.collect {issueManager.getIssueObject(it.id)}
        logger.debug("Total issues: ${results.total}") // количество найденных ишью по условию
        boolean worklogsExists = false
        String lastMonth
        String table = "||Issue Key||Worklog Date||Worklog Description||Worklog Time||" + "\n"
        Integer totalWorklogTime = 0                
        for (Issue issue : issues) { // Перебираем все задачи из JQL поиска
	        Collection<Worklog> worklogs = ComponentAccessor.worklogManager.getByIssue(issue) // Вытягиваем ворклоги определенной задачи
            for(Worklog worklog : worklogs){ // перебираем ворклоги
            	String worklogDesc // Проверка что ворклог деск не пустой.
                if (worklog.comment == "") worklogDesc = "There is no worklog description" // ^^^^
                else worklogDesc = worklog.comment.trim().replaceAll('\n', ' ') // убираем пробелы, заменяем переносы строк
                Calendar beforeCurrentMonth = Calendar.getInstance() // Создаем календарь
                beforeCurrentMonth.add(Calendar.MONTH, -1) // Берем предыдущий месяц
                lastMonth = checkDateFormat.format(beforeCurrentMonth.getTime()) // Выставляем формат для читаемого сравнения
                String worklogMonth = checkDateFormat.format(worklog.startDate) // Аналогично, все это в стринге.
                if (worklog.getAuthorObject().username == "REPORTER" && lastMonth == worklogMonth) { // Выбираем подходящие ворклоги из всех ворклогов
                	logger.debug(""""IssueKey is - ${worklog.getIssue().key}, worklog's author is - ${worklog.getAuthorObject().username},
                    worklog Date is - ${worklogDateFormat.format(worklog.startDate)}, worklog description is - ${worklog.comment}  
                    worklog time is - ${calculateTime(worklog.timeSpent)}""")
                    table = table + "|${worklog.getIssue().key}|${worklogDateFormat.format(worklog.startDate)}|${worklogDesc}|${calculateTime(worklog.timeSpent)}|" + " " + "\n"
                    totalWorklogTime = totalWorklogTime + worklog.timeSpent
                    worklogsExists = true
                }
          }
     }
     if (worklogsExists){
      	table += "h1.Total Time = ${calculateTime(totalWorklogTime)}"
        createIssue ("TEAM NAME", lastMonth, table, reporter, teamLead)
     }                     
        }            

        catch(Exception e){
        	logger.debug(e)
            sendMail("EMAIL","ШЕФ ВСЕ ПРОПАЛО","ТАЙМШИТЫ НАКРЫЛИСЬ, ГИПС СНИМАЮТ КЛИЕНТ УЕЗЖАЕТ.")
    	}
	}

    static boolean sendMail(String emailAddr, String subject, String body) { // метод для отправки емейла 
        def mailServer = ComponentAccessor.mailServerManager.defaultSMTPMailServer // Вызываем майл сервер
        def wasAddedToQueue = false
        if (mailServer) {
            def mail = new Email(emailAddr)
            mail.setSubject(subject)
            mail.setBody(body)
            mail.setMimeType("text/html")
            def item = new SingleMailQueueItem(mail)
            ComponentAccessor.mailQueue.addItem(item)
            wasAddedToQueue = true
        }
        return wasAddedToQueue
    }
    
    def getRequest(String url) { 
        def httpClient = HttpClientBuilder.create().build()
        def httpGet = new HttpGet(url)
        httpGet.with {
            setHeader("Authorization", "Basic BASICAUTH")
            setHeader("X-Atlassian-Token", "nocheck")

        }
        return httpClient.execute(httpGet)
    }

    void createIssue (String teamName , String worklogMonth, String table, ApplicationUser reporter, ApplicationUser teamLead) {
    	Issue newIssue = ComponentAccessor.issueFactory.getIssue()
        newIssue.setCustomFieldValue(approversField, [teamLead])
        newIssue.setSummary("${teamName} | ${reporter.getDisplayName()} | ${worklogMonth}")
        newIssue.setDescription(table)
        newIssue.setReporter(reporter)
        newIssue.setAssignee(teamLead)
        newIssue.setProjectObject(ApprovalProjectKey)
        newIssue.setIssueTypeId(issueType)
        newIssue.setCustomFieldValue(cfReqType,CustomerRequestTypeValue)
        newIssue.setCustomFieldValue(jqlCF, jqlValue)

        Map<String,Object> newIssueParams = ["issue" : newIssue] as Map<String,Object>
        issueManager.createIssueObject(admin, newIssueParams) // создание задач (обязательно наличие всех необходимых филдов)
    }

    String calculateTime(Long worklogTime) {
        Long formatTime1
        Long forMinutes = worklogTime / 60
        Long minutes = forMinutes % 60
        Long forHours = (forMinutes - minutes) / 60
        String result = ""
        if (forHours > 0) result = "${forHours}h"      
        if (minutes > 0) result = result + " ${minutes}m"
        return result
    }
    
    List <String> getProjectKeys(List<String> projectIDs) {
        List<String> projectKeys = new ArrayList<String>()
        for (String projectId : projectIDs) {
            Long id = Long.parseLong(projectId)
            if (id) {
                Project currentProject = projectManager.getProjectObj(id)
                if (currentProject) projectKeys.add(currentProject.key)
            }    
        }
        return projectKeys
    }
    
    def getCustomerRequestType(){
    	def newRequestType
        for(int limitRequest = 0;limitRequest <301;limitRequest += 100){
            PagedRequest pagedRequest  = new SimplePagedRequest(limitRequest,limitRequest+100)
            def reqQ2 = requestTypeService.newQueryBuilder().pagedRequest(pagedRequest).build()
            def reqT2 = requestTypeService.getRequestTypes(admin, reqQ2)
			if(reqT2.results.find{it.getName()=="REQUEST TYPE"}){
                newRequestType = reqT2.results.find{it.getName()=="REQUEST TYPE"}
                break
            }
        }     
    	def requestTypeService2 = ComponentAccessor.getOSGiComponentInstanceOfType(CustomerRequestTypeService)
        def reqQ3 = requestTypeService2.newQueryBuilder().requestType(newRequestType).build()
        def userFactory = ComponentAccessor.getOSGiComponentInstanceOfType(UserFactory)
        def uncheckedUser = userFactory.getUncheckedUser()
        def reqType = requestTypeService2.getCustomerRequestType(uncheckedUser, reqQ3)//получаем его id для записи в кастомное поле 
        return reqType
    }
}

