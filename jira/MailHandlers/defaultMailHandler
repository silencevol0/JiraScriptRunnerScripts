
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.*
import com.atlassian.jira.issue.context.IssueContext
import com.atlassian.jira.issue.context.IssueContextImpl
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.customfields.option.Option
import com.atlassian.jira.issue.customfields.option.Options
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.fields.config.FieldConfig
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.issuetype.IssueType
import com.atlassian.jira.service.util.handler.MessageHandlerContext
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.util.ImportUtils
import com.atlassian.mail.MailUtils
import org.apache.commons.io.FileUtils
import org.apache.log4j.Level
import org.apache.log4j.Logger
import com.atlassian.jira.issue.fields.config.FieldConfig
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.workflow.TransitionOptions.Builder
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.index.IssueIndexingService
import com.atlassian.jira.issue.comments.CommentManager
import com.atlassian.jira.bc.user.search.UserSearchService
import javax.mail.internet.MimeMultipart
import javax.mail.BodyPart
import javax.mail.Message


new Class_MailHandler().run(message, messageHandlerContext)
class Class_MailHandler {
    
    
    Logger logger = Logger.getLogger(this.class.name)
    ApplicationUser admin = ComponentAccessor.userManager.getUserByName("USERNAME")
    IssueService issueService = ComponentAccessor.getIssueService()
    CustomField category = ComponentAccessor.customFieldManager.getCustomFieldObject(16109)
    CustomFieldManager customFieldManager = ComponentAccessor.getCustomFieldManager()
    OptionsManager optionsManager = ComponentAccessor.getOptionsManager()
    UserSearchService userSearchService = ComponentAccessor.getComponent(UserSearchService)

    MutableIssue curIssue
	
    def run(Message message, MessageHandlerContext messageHandlerContext) {
        long scriptStartTime = System.currentTimeMillis()
        logger.setLevel(Level.DEBUG)
        logger.debug("Script started for message Subject '${message.getSubject()}'")
        String[] fromArray = message.from.toString().split("<")
        String from = fromArray[1].replace(">","").replace("]","")
        logger.debug("Email from is - ${from}")
        ApplicationUser userFrom = userSearchService.findUsersByEmail(from).first()
        String body = MailUtils.getBody(message)
        logger.debug("BODY!!! Content is - ${body}")
		String[] splitMessage = message.getSubject().split("\\s",2)
        String issueKey = splitMessage[0]
        String emailValue = splitMessage[1]
        logger.debug ("Issue key is - ${issueKey}, and CFValue is - ${emailValue}")
		curIssue = ComponentAccessor.getIssueManager().getIssueObject(issueKey)
        logger.debug ("issue.assignee.getEmailAddress() == ${curIssue.assignee.getEmailAddress()} and fromEmail == ${from}")
        String categoryValue = curIssue.getCustomFieldValue(category)
        if (curIssue.getAssignee().getEmailAddress() == from && categoryValue in [null,"Письмо отправлено"]) {
 		    sendComment(body)
            switch (emailValue) {
                case "Работа подтверждена":
					curIssue.setCustomFieldValue(category,setOption(emailValue))
                	break
                case "Работа не подтверждена":
                	sendComment("COMMENT")
                	curIssue.setCustomFieldValue(category,null)
					transitIssue(curIssue, "TRANSIT NAME")
                	break
            }
            updateIssue(curIssue)
            long scriptWorkTime = System.currentTimeMillis() - scriptStartTime
        	logger.debug("Script work time: ${scriptWorkTime} ms.")
        }
    }
    
    Option setOption(String value) {
		FieldConfig configCategory = category.getRelevantConfig(curIssue)
        Options options = optionsManager.getOptions(configCategory)
        Option option = options.find {it.value == value}
        return option
    }
    
    def transitIssue(Issue issue, String transitName){
    	def workflow = ComponentAccessor.workflowManager.getWorkflow(issue)
    	int transitionID = workflow.getActionsByName(transitName).first().id
    	Builder builder =  new Builder()
    	def transopt = builder.skipConditions().skipValidators().skipPermissions()
    	IssueService.TransitionValidationResult transitionValidationResult = issueService.validateTransition(admin, issue.getId(), transitionID, issueService.newIssueInputParameters(),transopt.build())
    	logger.debug("${issue.key} ${transitionValidationResult.isValid()}")
    	if (transitionValidationResult.isValid()) 
		IssueService.IssueResult transitionResult = issueService.transition(admin, transitionValidationResult)
	}
    
    void updateIssue(MutableIssue issue) {
    	ComponentAccessor.getIssueManager().updateIssue(admin,issue,EventDispatchOption.DO_NOT_DISPATCH,true)
    	IssueIndexingService indexing = (IssueIndexingService) ComponentAccessor.getComponent(IssueIndexingService.class)
    	indexing.reIndex(issue)
    }
    
    void sendComment(String body) {
        ComponentAccessor.getCommentManager().create(curIssue, curIssue.getAssignee(), body, false)
    }
}